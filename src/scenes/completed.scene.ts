import { Markup, Scenes } from 'telegraf';
import { IBotContext } from '../context/context.interface';
import { SCENE_ID_MAP } from '../constants';
import { Scene } from './scene.class';
import { getCounterRow } from '../utils';

export class CompletedScene extends Scene {
  constructor() {
    super(new Scenes.BaseScene<IBotContext>(SCENE_ID_MAP.completed));
  }

  handle() {
    this.scene.enter(async (ctx) => {
      await ctx.deleteMessage();

      if (ctx.session.isMaxCompletedTimers) {
        await ctx.reply(
          `
          ü§ñ 
          \n –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –ø–æ–º–∏–¥–æ—Ä–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! üî•
          \n –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ 15 - 30 –º–∏–Ω—É—Ç. 
          \n –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–º–∏–¥–æ—Ä–∫—É" –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.
          ${getCounterRow(ctx.session)}
          `,
          Markup.inlineKeyboard([
            Markup.button.callback('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–º–∏–¥–æ—Ä–∫—É ‚ñ∂', 'start_timer'),
          ])
        );
      } else {
        await ctx.reply(
          `
          ü§ñ 
          \n –ü–æ–º–∏–¥–æ—Ä–∫–∞ –ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!
          \n –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ 5-10 –º–∏–Ω—É—Ç. 
          \n –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–º–∏–¥–æ—Ä–∫—É" –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.
          ${getCounterRow(ctx.session)}
          `,
          Markup.inlineKeyboard([
            Markup.button.callback(
              '–ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–º–∏–¥–æ—Ä–∫—É ‚è≠',
              'start_timer'
            ),
          ])
        );
      }
    });
  }
}
